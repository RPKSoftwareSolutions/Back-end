
using IdentityServer4.Validation;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using TKD.Domain.AuthenticateModels;
using TKD.DomainModel.AuthenticateModels;
using TKD.Infrastructure;
using static IdentityModel.OidcConstants;

namespace AuthServer.Auth
{
    public class GoogleGrant: IExtensionGrantValidator
    {
        public string GrantType
        {
            get
            {
                return "googleAuth";
            }
        }

        private AppDbContext _context;
        public GoogleGrant(AppDbContext context)
        {
            this._context = context;
        }


        public async Task ValidateAsync(ExtensionGrantValidationContext context)
        {
            /* the "id_token" is generated by Google after user logs in to Google, and in exchange an "id_token" can be retrieved.
             * This id_token should be then submitted to our AuthServer by the client-side app to obtain an access_token from our AuthServer.
             * Study this on Google's docs if you are not entirely familiar with how it is done: https://developers.google.com/identity/sign-in/web/backend-auth
             * Also have a look at this article, especially part 3: https://www.linkedin.com/pulse/securing-net-core-web-api-identityserver4-resource-owner-dalvandi/?trk=mp-author-card
             */

            var userToken = context.Request.Raw.Get("id_token");

            if (string.IsNullOrEmpty(userToken))
            {
                context.Result = new GrantValidationResult(TokenErrors.InvalidGrant, null);
                return;
            }

            // validating the google's "id_token" to confirm its integrity
            HttpClient client = new HttpClient();

            var request = client.GetAsync("https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=" + userToken).Result;

            // if the token is in fact integral:
            if (request.StatusCode == System.Net.HttpStatusCode.OK)
            {
                // obtain the user's information from Google
                var result = await request.Content.ReadAsStringAsync();
                var obj = JObject.Parse(result);
                var GoogleUser = new GoogleUserObject
                {
                    Email = obj["email"].ToString(),
                    EmailVerified = bool.Parse(obj["email_verified"].ToString()),
                    FirstName = obj["given_name"].ToString(),
                    LastName = obj["family_name"].ToString(),
                };

                var U = new UnitOfWork(this._context);

                // check if the user already exists in our database:
                var userExists = U.Auth.Find(u => u.Email == GoogleUser.Email).Count() > 0;

                // if the user does not exist, create a user in our database:
                if (!userExists)
                {
                    var newUser = new User
                    {
                        Email = GoogleUser.Email,
                        EmailVerified = GoogleUser.EmailVerified,
                        FirstName = GoogleUser.FirstName,
                        LastName = GoogleUser.LastName,
                        PhoneNumber = "",
                        PhoneNumberVerified = false,
                        Password = "N/A",
                        Username = GoogleUser.Email,
                        Active = GoogleUser.EmailVerified
                    };
                    U.Auth.Add(newUser);
                    U.Complete();
                }

                // Authenticate the user and deliver the access_token and refresh_token to him/her:
                var authUser = U.Auth.Find(u => u.Email == GoogleUser.Email).FirstOrDefault();

                context.Result = new GrantValidationResult(authUser.Id.ToString(), "google");
                return;
            }
            else
            {
                return;
            }
        }
    }

    public class GoogleUserObject
    {
        public string Email { get; set; }
        public bool EmailVerified { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }
}
